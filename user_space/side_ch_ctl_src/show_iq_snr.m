% iq_mat_filename is the mat file generated by test_iq_file_display.m
% First run without threshold input for you to decide a threshold on plot
% Then run with threshold input

function show_iq_snr(iq_mat_filename, threshold)
close all;
if exist('iq_mat_filename', 'var')==0 || isempty(iq_mat_filename)
    iq_mat_filename = 'iq_8187.mat';
end

if exist('threshold', 'var')==0 || isempty(threshold)
    threshold = -1;
end

% let user check the moving average 80 of abs().^2 plot
iq = load(iq_mat_filename);
iq = iq.iq_capture;
iq = iq(:);
iq_abs2 = abs(iq).^2;
% figure; plot(iq_abs2);
iq_abs2(iq_abs2 == 0) = [];
% figure; plot(iq_abs2);
iq_abs2_mv_avg80_db = 10.*log10(conv(iq_abs2, ones(80,1))./80);

if threshold == -1
    figure; plot(iq_abs2_mv_avg80_db);
    return;
end

iq_abs2_mv_avg80_db = iq_abs2_mv_avg80_db(40:(40+length(iq_abs2)-1));
logical_vec = (iq_abs2_mv_avg80_db > threshold);

signal_part_idx = conv((~logical_vec), ones(160,1));
signal_part_idx = signal_part_idx(80:(80+length(logical_vec)-1));
signal_part_idx = (signal_part_idx == 0);

noise_part_idx = conv((logical_vec), ones(160,1));
noise_part_idx = noise_part_idx(80:(80+length(logical_vec)-1));
noise_part_idx = (noise_part_idx == 0);

figure;
max_val = max(iq_abs2);
plot(iq_abs2); hold on; grid on;
plot(max_val.*signal_part_idx, 'r');
plot(0.5.*max_val.*noise_part_idx, 'k');

noise_power = mean(iq_abs2(noise_part_idx));
signal_plus_noise_power = mean(iq_abs2(signal_part_idx));
snr = 10*log10((signal_plus_noise_power-noise_power)/noise_power)
% figure;
% plot(iq_abs2); hold on; grid on;
% tmp = conv(iq_abs2, ones(80,1))./80;
% tmp = tmp(40:(40+length(iq_abs2)-1));
% plot(tmp);